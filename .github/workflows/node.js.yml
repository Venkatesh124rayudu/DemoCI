# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code, run tests, and deploy to Render
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI/CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  # Continuous Integration Job
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
     
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
       
    - name: Install dependencies
      run: npm ci
     
    - name: Build application
      run: npm run build --if-present
     
    - name: Run tests
      run: npm test

  # Continuous Deployment Job
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test  # Only deploy if tests pass
    # Only deploy on push to master (not on pull requests)
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
   
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
     
    - name: Deploy to Render
      id: deploy
      run: |
        echo "🚀 Deploying to Render..."
        
        # Make the API call and capture both response and HTTP code
        response=$(curl -s -w "\n%{http_code}" -X POST \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys")
       
        # Extract HTTP code and response body
        http_code=$(echo "$response" | tail -n1)
        body=$(echo "$response" | head -n -1)
       
        echo "HTTP Status Code: $http_code"
        echo "Response Body: $body"
       
        # Check if deployment was successful
        if [ "$http_code" -eq 201 ] || [ "$http_code" -eq 200 ]; then
          echo "✅ Deployment triggered successfully!"
          if command -v jq &> /dev/null; then
            echo "$body" | jq '.' || echo "$body"
          else
            echo "$body"
          fi
          echo "deploy_status=success" >> $GITHUB_OUTPUT
        else
          echo "❌ Deployment failed with HTTP $http_code"
          echo "Error details: $body"
          echo "deploy_status=failed" >> $GITHUB_OUTPUT
          exit 1
        fi
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
      continue-on-error: false
       
    - name: Deployment Status
      if: always()
      run: |
        if [ "${{ steps.deploy.outputs.deploy_status }}" = "success" ]; then
          echo "🎉 Deployment completed successfully!"
          echo "Check your application at: https://your-app-name.onrender.com"
          echo "Commit deployed: ${{ github.sha }}"
        else
          echo "💥 Deployment failed!"
          echo "Check the logs above for error details."
          exit 1
        fi

    - name: Notify deployment failure
      if: failure()
      run: |
        echo "::error::Deployment to Render failed. Please check the deployment logs and your Render service configuration."